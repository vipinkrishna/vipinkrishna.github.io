{"version":3,"sources":["components/Tree.js","components/Input.js","App.js","index.js"],"names":["Tree","toggleView","setState","show","state","this","props","name","data","level","tree","map","node","key","className","style","marginLeft","String","sign","onClick","Component","Input","onChange","handleChange","value","type","handleClick","App","e","tree_text","target","typed_tree","JSON","parse","err","error","message","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"iTAmCeA,G,kBA7BX,aAAe,IAAD,8BACV,+CAGJC,WAAa,WACT,EAAKC,SAAS,CAACC,MAAO,EAAKC,MAAMD,QAHjC,EAAKC,MAAQ,CAACD,MAAM,GAFV,E,sEAOJ,IAAD,EACuBE,KAAKC,MAA1BC,EADF,EACEA,KAAMC,EADR,EACQA,KAAMC,EADd,EACcA,MAEbC,EAAOF,GAAQA,EAAKG,IAAI,SAACC,EAAMC,GACjC,OAAiB,OAAdD,EAAKJ,KACC,yBAAKM,UAAU,WAAWC,MAAO,CAACC,WAAYC,OAH5C,IAGoDR,EAAQ,IAAe,MAAOI,IAAKA,GAAMD,EAAKL,MAEtG,kBAACP,EAAD,CAAMa,IAAKA,EAAKN,KAAMK,EAAKL,KAAMC,KAAMI,EAAKJ,KAAMC,MAAOA,EAAM,MAEpES,EAAOb,KAAKD,MAAMD,KAAO,WAAa,MAE5C,OACI,oCACI,yBAAKW,UAAU,WAAWC,MAAO,CAACC,WAAYC,OAXvC,GAW8CR,GAAkB,MAAOU,QAASd,KAAKJ,YACxF,0BAAMa,UAAU,QAAQI,GAAaX,GAExCF,KAAKD,MAAMD,MAAQO,O,GAxBjBU,cCWJC,G,uLATP,OACA,yBAAKP,UAAU,iBACX,8BAAUQ,SAAUjB,KAAKC,MAAMiB,aAAcC,MAAOnB,KAAKC,MAAMkB,QAC/D,4BAAQC,KAAK,SAASN,QAASd,KAAKC,MAAMoB,aAA1C,gB,GALQN,cC6CLO,G,kBA1Cb,aAAe,IAAD,8BACZ,+CAWFJ,aAAe,SAACK,GACd,EAAK1B,SAAS,CAAC2B,UAAWD,EAAEE,OAAON,SAbvB,EAgBdE,YAAc,SAACE,GACb,IAAIG,EACJ,IACIA,EAAaC,KAAKC,MAAM,EAAK7B,MAAMyB,WACnC,EAAK3B,SAAS,CAACQ,KAAMqB,IACvB,MAAMG,GACJ,EAAKhC,SAAS,CAACiC,MAAO,UAAYD,EAAIE,UACtCC,WAAW,WAAO,EAAKnC,SAAS,CAACiC,MAAO,QAAS,OArBrD,EAAK/B,MAAQ,CACXM,KAAM,CACJH,KAAM,eACNC,KAAM,CAAC,CAACD,KAAM,QAASC,KAAM,MAAO,CAACD,KAAM,OAAQC,KAAM,QAE3DqB,UAAU,2FACVM,MAAO,MARG,E,sEA4BZ,OACE,yBAAKrB,UAAU,YACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAOS,aAAclB,KAAKkB,aAAcC,MAAOnB,KAAKD,MAAMyB,UAAWH,YAAarB,KAAKqB,cACvF,yBAAKZ,UAAU,SAAST,KAAKD,MAAM+B,QAErC,yBAAKrB,UAAU,QACb,kBAAC,EAAD,CAAMP,KAAMF,KAAKD,MAAMM,KAAKH,KAAMC,KAAMH,KAAKD,MAAMM,KAAKF,KAAMC,MAAO,U,GApC7DW,cCAlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b93e3347.chunk.js","sourcesContent":["//https://github.com/vipinkrishna\r\n\r\nimport React, {Component} from 'react';\r\nimport './Tree.scss'\r\n\r\nclass Tree extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {show: false}\r\n    }\r\n    toggleView = () => {\r\n        this.setState({show: !this.state.show})\r\n    }\r\n    render() {\r\n        const {name, data, level} = this.props\r\n        const margin = 40\r\n        const tree = data && data.map((node, key) => {\r\n            if(node.data === null) {\r\n              return <div className=\"TreeNode\" style={{marginLeft: String((level + 1) * margin) + \"px\"}} key={key}>{node.name}</div>\r\n            }\r\n            return <Tree key={key} name={node.name} data={node.data} level={level+1} />\r\n        })\r\n        const sign = this.state.show ? \" \\u2212 \" : \" + \"\r\n        // const sign = this.state.show ? \" \\u2228 \" : \" \\x3E \"\r\n        return (\r\n            <>\r\n                <div className=\"TreeNode\" style={{marginLeft: String(level * margin) + \"px\"}} onClick={this.toggleView}>\r\n                    <span className=\"Sign\">{sign}</span>{name}\r\n                </div>\r\n                {this.state.show && tree}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tree;","//https://github.com/vipinkrishna\r\n\r\nimport React, { Component } from 'react'\r\nimport './Input.scss'\r\n\r\nclass Input extends Component {\r\n     render() {\r\n        return (\r\n        <div className=\"InputTextArea\">\r\n            <textarea onChange={this.props.handleChange} value={this.props.value} />\r\n            <button type=\"button\" onClick={this.props.handleClick}>convert</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;\r\n","//https://github.com/vipinkrishna\n\nimport React, { Component } from 'react'\nimport Tree from './components/Tree';\nimport Input from './components/Input';\nimport './App.scss'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      tree: {\n        name: \"vipinkrishna\",\n        data: [{name: \"React\", data: null}, {name: \"Node\", data: null}]\n      },\n      tree_text: `{\"name\": \"root\", \"data\": [{\"name\": \"one\", \"data\": null}, {\"name\": \"two\", \"data\": null}]}`,\n      error: null\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({tree_text: e.target.value})\n  }\n\n  handleClick = (e) => {\n    let typed_tree\n    try {\n        typed_tree = JSON.parse(this.state.tree_text)\n        this.setState({tree: typed_tree})\n    } catch(err) {\n        this.setState({error: \"ERROR: \" + err.message})\n        setTimeout(() => {this.setState({error: null})}, 3000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Treeview\">\n        <div className=\"Input\">\n          <Input handleChange={this.handleChange} value={this.state.tree_text} handleClick={this.handleClick}/>\n          <div className=\"Error\">{this.state.error}</div>\n        </div>\n        <div className=\"Tree\">\n          <Tree name={this.state.tree.name} data={this.state.tree.data} level={0} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","//https://github.com/vipinkrishna\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}